rgb = '''1054,1529
1539,2319
1179,967
1616,1565
873,1434
2421,5353
2319,3369
3195,4348
3819,2547
5343,3795
2916,1973
3626,2542
1597,1208
3599,3656
2067,4761
3273,4901
2075,2806
1596,2487
1860,2272
4672,5430
1695,1782
2691,2432
3668,3348
1431,1995
680,1136
948,934
693,890
462,593
693,890
2385,2206
1410,1708
4080,3821
1410,1709
3491,1877
1180,1232
720,636
925,1187
694,890
1179,1232
694,890
694,890
6989,4516
801,1276
1042,1357
842,1034
1100,1102
1556,1490
1746,1820
637,693
3516,2193
2773,1585
2117,2409
5276,4308
2292,2051
1185,1193
1675,1515
721,607
1212,923
1442,1215
696,864
1124,1214
3826,3473
5001,3855
2218,5435
694,1049
6602,1308
7838,2133
669,1118
2698,3493
1228,803
1954,1277
1250,535
1649,2108
2047,1023
1426,1589
3375,2941
1813,2633
922,1062
1559,2132
801,1605
2203,931
1277,1700
1275,1700
978,1641
702,2101
835,1137
668,1155
1500,1747
859,1327
1169,1196
915,1159
941,905
1143,1449
1428,1229
1420,1318
914,1160
1164,1196
910,1159
750,333
1164,1196
1423,1226
1198,934
1166,1195
1624,1118
1153,837
894,829
1153,837
2827,1678
910,1215
1246,1878
1622,1435
3407,2780
1104,1101
436,594
1104,1101
2580,2032
1062,1893
3144,1397
2047,3471
3304,1965
1502,1906
915,1160
595,1102
872,1188
594,1101
1195,623
624,856
670,1118
1981,623
1082,1171
933,618
1038,1425
1398,1159
1360,1113
680,556
940,559
670,1118
670,1118
1361,1113
851,1086
606,1065
851,1087
941,558
920,855
920,1104
629,835
838,1112
673,576
880,858
880,857
881,858
1403,883
1608,1170
1402,884
625,1080
661,835
2223,2017
873,853
899,1407
1746,1707
1487,1684
855,914
655,620
3125,2141
943,904
1428,1227
1008,1458
943,904
850,912
652,618
819,885
885,1115
1728,973
670,1118
1361,1117
850,1089
956,2358
1672,843
1881,1125
1934,838
1672,842
1485,1906
1359,1117
788,1587
1272,1633
1409,844
1416,2404
857,1367
638,1087
1221,598
882,1117
1387,1155
581,2082
1172,874
1172,874
1571,1698
834,1613
880,1114
1053,1892
1294,1923
1395,1158
1410,839
1359,1112
1620,1119
1360,1114
1410,841
902,864
864,1119
901,864
901,864
1421,1318
949,595
646,840
901,864
1685,897
862,1119
1847,1465
1160,881
1161,882
390,1056
686,582
1114,1146
2678,1381
1305,2119
2088,1911
2508,2708
1577,1885
1156,1089
898,1077
1151,1091
838,1332
3097,2013
2398,1445
1140,1347
1686,1105
1140,1347
859,1326
1658,1098
1919,1098
1439,824
1919,1098
1659,1098
1398,1094
1141,1086
1619,1364
1659,1097
819,1826
1659,1097
1700,821
1700,821
1140,1086
2139,1373
1140,1085
885,1073
850,1322
1098,1338
1609,1358
1098,1338
1200,934
4168,1614
2431,1083
870,1599
1051,2367
1102,1618
1227,570
1253,2634
1224,563
2228,845
1817,1924
645,1067
1179,866
1137,1133
2168,1168
1475,586
2809,2030
2551,2017
911,854
1197,1010
847,1362
1451,2693
653,833
2765,2304
3023,2317
1122,1135
2472,878
1301,1665
2283,2004
650,831
1919,2000
2085,3217
2835,2284
1431,1563
1319,983
1908,1602
2735,2154
1628,2002
1099,890
1069,2127
863,1602
1645,4955
2906,1728
812,2854
2944,1447
3530,858
2267,573
596,2581
3531,858
8888,1376
2195,1148
2977,1150
1728,974
3423,1725
4607,1023
3497,1147
1712,863
2901,1719
2417,1430
7597,1380
828,2097
1098,1622
3604,2279
1711,861
3861,2274
3783,829
2185,1115
5005,1361
5780,1340
7001,3907
9327,1832
686,870
6624,398
3743,1085
3806,2496
4445,1647
2222,823
2663,1387
3623,1936
443,827
681,911
3982,3029
1964,2667
1474,2631
1139,1082
915,1090
1372,1634
1428,1229
1626,1652
1169,1104
1142,1361
1748,3182
888,1339
4966,3650
4152,3881
1515,2408
2408,3497
3748,1109
1870,4199
1653,3401
1428,1229
2185,2935
1917,1094
885,1330
2998,3204
685,870
1689,1081
918,1063
2322,2404
681,911
10240,4096
4608,1280
5120,1280
7168,3072
4352,3584
7582,4333
7168,2560
1024,768
4093,6529
1690,2620
785,1031
2673,3974
5231,4616
3057,4358
2698,3723
7278,5286
2110,4516
3365,1747
6297,5762
3745,3569
3584,6598
3561,5263
5892,2351
5892,1836
4304,3445
6330,4183
864,1117
692,574
861,1120
874,1108
1163,882
635,657
1266,1040
5445,4561
4426,4182
3371,5292
2889,4714
2176,2850
3330,7204
6471,4479
4112,4793
3714,3543
3995,3038
6531,4182
6040,3637
3467,3272
2403,6652
4894,4898
3960,3976
6904,4835
4202,2853
6451,4011
5737,3173
3942,2841
1076,1260
5136,5156
2889,4932
1667,3154
1956,2897
7242,5678
1373,2847
6661,6308
3832,7665
3702,4049
2409,5499
1692,2912
968,6201
2939,3256
2486,1941
4782,6677
3120,2655
4769,4386
2307,3082
2926,4668
2737,2105
1732,1483
3111,2981
5963,5553
5352,4281
2147,2061
1002,1285
1704,1702
534,1154
5870,5822
1199,1600
759,1221
1329,2143
1968,1750
809,975
819,981
1330,1061
1826,2273
1691,1693
627,670
1447,1655
1448,1656
1889,2017
1568,2207
1075,1032
730,1465
627,670
1427,761
818,982
1819,2270
1255,1342
1338,1071
2230,1786
2252,2631
2846,1510
1698,1702
2949,3042
2009,3842
1666,2996
3873,4586
2759,5800
5942,6059
2657,4891
436,793
684,812
211,521
707,547
677,806
979,674
912,841
432,781
711,536
1183,1080
952,813
2276,1819
647,632
684,816
1398,1618
1137,910
932,1078
2170,3099
1289,1173
790,1203
786,1202
702,572
650,813
1674,1908
1673,1907
1028,1252
444,552
560,1145
592,901
1488,1604
1230,1561
1934,1957
1183,1807
1812,1367
1809,2451
1037,1225
1238,895
2064,1416
428,543
1998,610
824,1385
975,645
696,1112
612,1100
1839,2524
1209,4186
1632,2240
2370,1639
3008,1546
3419,3612
970,534
1580,2314
4165,3438
1373,1162
2351,2379
1084,1174
1085,1408
395,590
1567,1465
1163,882
728,621
395,590
413,592
687,580
867,1127
1119,1089
1164,891
1119,1155
648,844
2605,1475
991,288
916,672
585,1083
603,1085
1821,1460
1095,1144
607,1103
1315,1443
637,847
690,1110
865,1125
1102,1161
614,830
408,810
2021,1870
1758,1159
730,1334
1009,585
732,1082
984,1106
487,805
738,828
487,804
497,1816
732,1080
1775,1615
2454,3001
1464,2149
996,836
1488,1384
5299,3131
736,1071
1745,1408
1732,1670
976,1359
4346,1199
1263,1846
1246,1107
1245,1108
761,1315
4346,1251
1536,316
2002,1436
737,829
486,805
1253,865
3862,2361
1802,1050
1033,1039
1026,776
1283,1290
4356,2589
464,799
993,573
1230,850
733,563
733,564
970,838
1513,582
970,838
1253,578
476,547
970,836
475,546
735,562
734,562
972,837
953,1094
734,562
476,547
465,799
971,836
970,837
7950,4334
2958,3192
3223,2999
3840,3328
1674,2109
2199,1872
1679,2110
1905,1627
1811,1988
2028,2261
1588,1700
1557,1954
2495,1928
1970,2160
1608,1704
1609,1703
2352,2024
1613,1696
2335,2268
2072,2006
1786,2237
2293,2286
2364,1769
1559,2194
1803,2253
1557,2197
2057,2308
2577,2402
1608,2157
1876,2004
2224,2166
1800,2458
1604,2152
1612,2159
1732,1648
1860,2219
1868,2214
1615,2173
3004,2987
1852,2235
1549,2424
1837,2260
1764,2259
2093,2050
2042,2293
2072,2510
1692,1903
2167,2232
2148,2211
1639,2122
1884,2182
1574,2381
1868,2186
1873,2172
1872,2179
1815,2435
1804,2435
2027,2497
2040,2514
2193,1969
2136,2233
1834,2439
2155,2234
1834,2465
1946,1959
2590,2608
2078,2517
2089,2516
1890,2221
2792,2923
2143,2271
2158,2239
2091,2501
3350,3883
3702,4782
1788,2292
1447,1724
970,1669
1541,1454
1524,2254
2322,1471
2060,1474
1292,1449
1649,1183
1542,1464
2423,2614
1291,1444
1952,1758
1947,1757
5415,3829
1992,2950
3278,4225
2622,2643
1378,1047
1909,2240
1113,1015
1135,1014
4814,3596
1552,2158
1435,1492
7568,5619
2052,2326
1846,1801
1625,1511
1614,3180
2103,3227
1921,1941
1792,1280
2492,1474
3273,1958
4385,2790
3072,3584
1759,3283
2982,3462
4010,3141
3922,3675
1711,1431
2948,2300
1233,869
3426,2844
3962,2629
3764,2437
3518,2166
2733,2406
1489,1336
4020,2439
2230,1460
4529,2718
1915,1476
3349,2656
2180,1498
2351,2327
5565,2822
2772,1634
1903,2476
3456,3721
8074,4359
6258,4587
3955,4254
3184,2584
3739,2959
3420,4740
3182,3723
2343,1739
1825,3608
3290,2005
3871,3383
4473,2925
2915,4249
4495,3981
1378,1073
2422,2380
2423,2380
1625,1526
1354,1707'''

grayscale = '''4000,4000
4000,4000
5200,4000
4000,4000
4000,4000
5200,4000
4000,3620
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
5200,4000
5200,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,3620
5200,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
5200,4000
4000,4000
4000,4000
4000,3620
4000,4000
4000,4000
5200,4000
4000,4000
4000,3620
5200,3620
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
5200,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
5200,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,2929
4000,4000
4293,4000
4000,4000
4000,4000
4000,4000
4000,4962
4293,4962
4000,4000
4000,4000
4000,4000
4000,4000
4294,4000
4294,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,4964
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
4293,4000
4000,2941
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
4288,4000
4000,4958
4000,4958
4288,4958
4000,4000
4000,4000
4000,4000
4294,4000
4000,4000
4000,4000
4294,4982
4000,4000
4000,4000
4295,4000
4000,4980
4000,4980
4000,4983
4000,4983
4000,4983
4000,4000
4000,4000
4000,4000
4000,4000
4000,4000
4295,4986
4000,4000
4291,4000
4000,4000
4293,4000
4000,4000
4000,4981
4000,4000
4000,4000
4294,4000
4000,4000
4294,4000
4294,4992
4294,4000
4000,4000
4294,4000
4000,4981
4000,4981
4000,4000
4000,4000
4000,4000
4000,4966
4000,4966
4000,4966
4000,4000
4284,4945
4000,4000
4288,4000
4000,4000
4000,4959
4288,4959
4000,4000
4000,4970'''

import math

def test_cond(res, n, start, end, fn):
    for i in range(start, end + 1):
        count = 0
        for p in res:
            if fn(p, i):
                count += 1
            if count >= n:
                return i

def search(s):
    res = []
    for p in s.split('\n'):
        a, b = p.split(',')
        res.append((int(a), int(b)))
    print(f'len: {len(res)}')

    frac = 0.75
    n = math.ceil(len(res) * frac)

    min_width = min(res, key=lambda x: x[0])[0]
    max_width = max(res, key=lambda x: x[0])[0]
    min_height = min(res, key=lambda x: x[1])[1]
    max_height = max(res, key=lambda x: x[1])[1]

    print(f'width: [{min_width}, {max_width}]')
    print(f'height: [{min_height}, {max_height}]')

    x_start = test_cond(res, n, min_width, max_width, lambda p, i: p[0] <= i)
    y_start = test_cond(res, n, min_height, max_height, lambda p, i: p[1] <= i)

    for x in range(x_start, max_width + 1):
        for y in range(y_start, max_height + 1):
            count = 0
            for a, b in res:
                if a <= x and b <= y:
                    count += 1
                if count >= n:
                    return x, y

ans = search(rgb)
print(f'x, y = {ans}')
print(ans[0] * ans[1] * 3 / 1e9)

ans = search(grayscale)
print(f'x, y = {ans}')
print(ans[0] * ans[1] * 3 / 1e9)

# 2409x6652 RGB
# 10240x7665 RGB
# 5200x4992 grayscale

# len: 783
# width: [211, 10240]
# height: [288, 7665]
# x, y = (2409, 6652)
# 0.048074004
# len: 154
# width: [4000, 5200]
# height: [2929, 4992]
# x, y = (4000, 4980)
# 0.05976